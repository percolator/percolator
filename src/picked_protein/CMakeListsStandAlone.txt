###############################################################################
# NAME AND VERSION
###############################################################################
cmake_minimum_required (VERSION 2.6)
project(PERCOLATOR_PICKED_PROTEIN)
set(PERCOLATOR_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../..")
include("${PERCOLATOR_SOURCE_DIR}/CommonCMake.txt")

###############################################################################
# PREPARING TO INSTALL
###############################################################################

my_set(CMAKE_BUILD_TYPE "Release" "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.")
my_set(CMAKE_PREFIX_PATH "../" "Default path to packages")

# PRINT VARIBALES
MESSAGE( STATUS )
MESSAGE( STATUS
"-------------------------------------------------------------------------------"
)
MESSAGE( STATUS "Building PICKED_PROTEIN:" )
MESSAGE( STATUS "change a configuration variable with: cmake -D<Variable>=<Value>" )
MESSAGE( STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}" )
MESSAGE( STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}" )
MESSAGE( STATUS "PERCOLATOR_SOURCE_DIR = ${PERCOLATOR_SOURCE_DIR}" )
MESSAGE( STATUS "CMAKE_PREFIX_PATH = ${CMAKE_PREFIX_PATH}" )
MESSAGE( STATUS "TARGET_ARCH = ${TARGET_ARCH}" )
MESSAGE( STATUS "PROFILING = ${PROFILING}")
MESSAGE( STATUS
"-------------------------------------------------------------------------------"
)
MESSAGE( STATUS )

 
# Detect machine architecture, on UNIX:
get_arch("${TARGET_ARCH}")

# # STORE NEWLY SET VARIABLES IN *.h.cmake FILES
load_config_files("${CMAKE_CURRENT_SOURCE_DIR}/../")
load_config_files("${CMAKE_CURRENT_SOURCE_DIR}")

###############################################################################
# COMPILING
###############################################################################
# include and link code from percolator
include_directories(${CMAKE_CURRENT_BINARY_DIR} ${PERCOLATOR_SOURCE_DIR}/src)
link_directories(${PERCOLATOR_SOURCE_DIR}/src)

add_library(pickedproteinlibrary STATIC PickedProteinCaller.cpp Database.cpp Protein.cpp ProteinPeptideIterator.cpp Peptide.cpp PeptideSrc.cpp PeptideConstraint.cpp ../Option.cpp ../Globals.cpp ../MyException.cpp ../Logger.cpp)

add_executable(picked-protein PickedProteinMain.cpp)

target_link_libraries(picked-protein pickedproteinlibrary)

IF(MINGW OR WIN32)
  set_property(TARGET picked-protein PROPERTY LINK_SEARCH_END_STATIC ON)
  set_target_properties(picked-protein PROPERTIES LINK_FLAGS "-Wl -Bstatic -static-libgcc")
ENDIF()

if(APPLE)
  set_property(TARGET picked-protein PROPERTY LINK_SEARCH_END_STATIC ON)
  set_property(TARGET picked-protein PROPERTY MACOSX_BUNDLE ON) 
endif(APPLE)

if(PROFILING AND UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 ${PROFILING_COMMON_FLAGS}")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 ${PROFILING_COMMON_FLAGS}")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}-O3 ${PROFILING_COMMON_FLAGS}")
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O3 ${PROFILING_COMMON_FLAGS}")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g -DNDEBUG ${PROFILING_COMMON_FLAGS}")
  set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0 -g -DNDEBUG ${PROFILING_COMMON_FLAGS}")
endif()

###############################################################################
# CROSS COMPILING AND INSTALLING
###############################################################################

if(APPLE)
  install(TARGETS picked-protein EXPORT PICKED_PROTEIN DESTINATION ./bin BUNDLE DESTINATION ../Applications) # Important to use relative path here (used by CPack)!
else(APPLE)
  install(TARGETS picked-protein EXPORT PICKED_PROTEIN DESTINATION bin)
endif(APPLE)


if(MINGW)
  add_custom_command( OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/picked-protein-${PACKAGE_VERSION}-win32.exe" COMMAND makensis 
		      "${PERCOLATOR_SOURCE_DIR}/cmake/windows_picked_protein/script.nsi" DEPENDS picked-protein) 
  add_custom_target( win32installer DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/picked-protein-${PACKAGE_VERSION}-win32.exe" )
endif()

###############################################################################
# PACKAGING
###############################################################################

# PACKAGING OPTIONS: GENERAL
set(PACKAGE_NICKNAME "picked-protein")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Protein inference using the picked protein method.")
include("${PERCOLATOR_SOURCE_DIR}/CPack.txt")
set(CPACK_RPM_PACKAGE_DEPENDS "libc6, libgcc1")

include(CPack)
